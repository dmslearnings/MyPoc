import javax.jms.*;

public class EMSProducer {
    public static void main(String[] args) {
        String serverUrl = "tcp://localhost:7222"; // Replace with your EMS server URL
        String username = "your_username";
        String password = "your_password";
        String topicName = "your_topic";

        ConnectionFactory factory = new com.tibco.tibjms.TibjmsConnectionFactory(serverUrl);
        Connection connection = null;
        Session session = null;
        MessageProducer producer = null;

        try {
            connection = factory.createConnection(username, password);
            session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
            Topic topic = session.createTopic(topicName);
            producer = session.createProducer(topic);

            TextMessage message = session.createTextMessage();
            message.setText("Hello, EMS!");

            producer.send(message);
            System.out.println("Message sent successfully.");

        } catch (JMSException e) {
            e.printStackTrace();
        } finally {
            try {
                if (producer != null) producer.close();
                if (session != null) session.close();
                if (connection != null) connection.close();
            } catch (JMSException e) {
                e.printStackTrace();
            }
        }
    }
}
===========
<dependency>
    <groupId>javax.json</groupId>
    <artifactId>javax.json-api</artifactId>
    <version>1.1.4</version>
</dependency>
<dependency>
    <groupId>org.glassfish</groupId>
    <artifactId>javax.json</artifactId>
    <version>1.1.4</version>
</dependency>

import javax.json.Json;
import javax.json.JsonObject;
import javax.jms.*;

public class EMSJsonProducer {
    public static void main(String[] args) {
        String serverUrl = "tcp://localhost:7222"; // Replace with your EMS server URL
        String username = "your_username";
        String password = "your_password";
        String topicName = "your_topic";

        ConnectionFactory factory = new com.tibco.tibjms.TibjmsConnectionFactory(serverUrl);
        Connection connection = null;
        Session session = null;
        MessageProducer producer = null;

        try {
            connection = factory.createConnection(username, password);
            session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
            Topic topic = session.createTopic(topicName);
            producer = session.createProducer(topic);

            // Create a JSON object
            JsonObject jsonObject = Json.createObjectBuilder()
                    .add("id", 1)
                    .add("name", "John Doe")
                    .add("age", 30)
                    .build();

            // Convert JSON object to String
            String jsonMessage = jsonObject.toString();

            // Create a TextMessage with JSON payload
            TextMessage message = session.createTextMessage();
            message.setText(jsonMessage);

            // Send the message
            producer.send(message);
            System.out.println("JSON Message sent successfully.");

        } catch (JMSException e) {
            e.printStackTrace();
        } finally {
            try {
                if (producer != null) producer.close();
                if (session != null) session.close();
                if (connection != null) connection.close();
            } catch (JMSException e) {
                e.printStackTrace();
            }
        }
    }
}
=================
import javax.jms.*;

public class EMSQueueProducer {
    public static void main(String[] args) {
        String serverUrl = "tcp://localhost:7222"; // Replace with your EMS server URL
        String username = "your_username";
        String password = "your_password";
        String queue1Name = "queue1";
        String queue2Name = "queue2";

        ConnectionFactory factory = new com.tibco.tibjms.TibjmsConnectionFactory(serverUrl);
        Connection connection = null;
        Session session1 = null;
        Session session2 = null;
        MessageProducer producer1 = null;
        MessageProducer producer2 = null;

        try {
            connection = factory.createConnection(username, password);
            connection.start();

            // Create Session and Producer for Queue 1
            session1 = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
            Queue queue1 = session1.createQueue(queue1Name);
            producer1 = session1.createProducer(queue1);

            // Create Session and Producer for Queue 2
            session2 = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
            Queue queue2 = session2.createQueue(queue2Name);
            producer2 = session2.createProducer(queue2);

            // Create and send message to Queue 1
            TextMessage message1 = session1.createTextMessage("Message for Queue 1");
            producer1.send(message1);
            System.out.println("Message sent to Queue 1: " + message1.getText());

            // Create and send message to Queue 2
            TextMessage message2 = session2.createTextMessage("Message for Queue 2");
            producer2.send(message2);
            System.out.println("Message sent to Queue 2: " + message2.getText());

        } catch (JMSException e) {
            e.printStackTrace();
        } finally {
            try {
                if (producer1 != null) producer1.close();
                if (producer2 != null) producer2.close();
                if (session1 != null) session1.close();
                if (session2 != null) session2.close();
                if (connection != null) connection.close();
            } catch (JMSException e) {
                e.printStackTrace();
            }
        }
    }
}
========consumer==================
import javax.jms.*;

public class EMSQueueConsumer {
    public static void main(String[] args) {
        String serverUrl = "tcp://localhost:7222"; // Replace with your EMS server URL
        String username = "your_username";
        String password = "your_password";
        String queueName = "your_queue";

        ConnectionFactory factory = new com.tibco.tibjms.TibjmsConnectionFactory(serverUrl);
        Connection connection = null;
        Session session = null;
        MessageConsumer consumer = null;

        try {
            connection = factory.createConnection(username, password);
            connection.start();

            session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
            Queue queue = session.createQueue(queueName);
            consumer = session.createConsumer(queue);

            System.out.println("Waiting for messages...");

            // MessageListener to process incoming messages
            consumer.setMessageListener(new MessageListener() {
                public void onMessage(Message message) {
                    try {
                        if (message instanceof TextMessage) {
                            System.out.println("Received message: " + ((TextMessage) message).getText());
                        } else {
                            System.out.println("Received message of unsupported type: " + message.getClass().getName());
                        }
                    } catch (JMSException e) {
                        e.printStackTrace();
                    }
                }
            });

            // Keep the program running to receive messages
            Thread.sleep(100000); // Adjust as needed or use an appropriate termination mechanism

        } catch (JMSException | InterruptedException e) {
            e.printStackTrace();
        } finally {
            try {
                if (consumer != null) consumer.close();
                if (session != null) session.close();
                if (connection != null) connection.close();
            } catch (JMSException e) {
                e.printStackTrace();
            }
        }
    }
}
====json=====
import javax.jms.*;
import javax.json.Json;
import javax.json.JsonObject;
import javax.json.JsonReader;
import java.io.StringReader;

public class EMSJsonQueueConsumer {
    public static void main(String[] args) {
        String serverUrl = "tcp://localhost:7222"; // Replace with your EMS server URL
        String username = "your_username";
        String password = "your_password";
        String queueName = "your_queue";

        ConnectionFactory factory = new com.tibco.tibjms.TibjmsConnectionFactory(serverUrl);
        Connection connection = null;
        Session session = null;
        MessageConsumer consumer = null;

        try {
            connection = factory.createConnection(username, password);
            connection.start();

            session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
            Queue queue = session.createQueue(queueName);
            consumer = session.createConsumer(queue);

            System.out.println("Waiting for messages...");

            // MessageListener to process incoming messages
            consumer.setMessageListener(new MessageListener() {
                public void onMessage(Message message) {
                    try {
                        if (message instanceof TextMessage) {
                            String jsonMessage = ((TextMessage) message).getText();
                            System.out.println("Received JSON message: " + jsonMessage);

                            // Parse JSON message
                            JsonReader jsonReader = Json.createReader(new StringReader(jsonMessage));
                            JsonObject jsonObject = jsonReader.readObject();
                            jsonReader.close();

                            // Extract data from JSON object
                            int id = jsonObject.getInt("id");
                            String name = jsonObject.getString("name");
                            int age = jsonObject.getInt("age");

                            System.out.println("Parsed JSON message:");
                            System.out.println("ID: " + id);
                            System.out.println("Name: " + name);
                            System.out.println("Age: " + age);

                        } else {
                            System.out.println("Received message of unsupported type: " + message.getClass().getName());
                        }
                    } catch (JMSException e) {
                        e.printStackTrace();
                    }
                }
            });

            // Keep the program running to receive messages
            Thread.sleep(100000); // Adjust as needed or use an appropriate termination mechanism

        } catch (JMSException | InterruptedException e) {
            e.printStackTrace();
        } finally {
            try {
                if (consumer != null) consumer.close();
                if (session != null) session.close();
                if (connection != null) connection.close();
            } catch (JMSException e) {
                e.printStackTrace();
            }
        }
    }
}
